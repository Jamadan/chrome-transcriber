{"version":3,"sources":["components/Recorder.jsx","App.js","serviceWorker.js","index.js"],"names":["SpeechRecognition","webkitSpeechRecognition","useState","isRecording","recorder","setRecorder","transcripts","setTranscripts","newRecognition","recognition","lang","continuous","interimResults","maxAlternatives","onend","onstart","onresult","event","last","results","length","result","transcript","console","log","confidence","onnomatch","onerror","height","className","rows","value","join","onChange","e","target","split","onClick","stop","start","App","Navbar","bg","expand","variant","Brand","href","Recorder","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iOAEIA,EAAoBA,GAAqBC,wBAE9B,aAAO,IAAD,EACaC,mBAAS,CAAEC,aAAa,IADrC,mBACZC,EADY,KACFC,EADE,OAEmBH,mBAAS,IAF5B,mBAEZI,EAFY,KAECC,EAFD,KAIbC,EAAiB,WACrB,IAAMC,EAAc,IAAIT,EAiCtB,OA/BFS,EAAYC,KAAO,QACnBD,EAAYE,YAAa,EACzBF,EAAYG,gBAAiB,EAC7BH,EAAYI,gBAAkB,EAE9BJ,EAAYK,MAAQ,aAIpBL,EAAYM,QAAU,WAEpBV,EAAY,CAAEF,aAAa,KAG7BM,EAAYO,SAAW,SAAAC,GACnB,IAAMC,EAAOD,EAAME,QAAQC,OAAS,EAC9BC,EAASJ,EAAME,QAAQD,GAAM,GAEnCX,EAAe,GAAD,mBAAKD,GAAL,CAAkBe,EAAOC,cAEvCC,QAAQC,IAAI,eAAiBH,EAAOI,WAAYJ,EAAOC,aAGzDb,EAAYiB,UAAY,SAAAT,KAIxBR,EAAYkB,QAAU,SAAAV,KAIfR,GAGPA,EAAcD,IAclB,OACE,yBAAKoB,OAAO,SACV,6BACA,8BACEC,UAAU,YACVC,KAAK,KACLC,MAAOzB,EAAY0B,KAAZ,MAEPC,SAAU,SAAAC,GAAC,OACT3B,EACE2B,EAAEC,OAAOJ,MAAMK,MAAf,UAKN,yBAAKP,UAAU,aACZzB,EAASD,aACR,yBAAK0B,UAAU,OAAOQ,QAAS,SAAAH,GAAC,OAtBtCzB,EAAY6B,OACZ7B,EAAcD,SACdH,EAAY,CAAEF,aAAa,MAoBrB,SAIAC,EAASD,aACT,yBAAKkC,QAAS,SAAAH,GAhCpBzB,EAAY8B,UAgCN,SAEF,6BACA,8BAEF,+BCtESC,EAXH,WACV,OACE,yBAAKX,UAAU,OACb,kBAACY,EAAA,EAAD,CAAQC,GAAG,UAAUC,OAAO,KAAKC,QAAQ,QACvC,kBAACH,EAAA,EAAOI,MAAR,CAAcC,KAAK,SAAnB,sBAEF,kBAACC,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f0c4c085.chunk.js","sourcesContent":["import React, { useState } from 'react';\n// eslint-disable-next-line\nvar SpeechRecognition = SpeechRecognition || webkitSpeechRecognition;\n\nexport default () => {\n  const [recorder, setRecorder] = useState({ isRecording: false });\n  const [transcripts, setTranscripts] = useState([]);\n\n  const newRecognition = () => {\n    const recognition = new SpeechRecognition();\n\n    recognition.lang = 'en-GB';\n    recognition.continuous = true;\n    recognition.interimResults = true;\n    recognition.maxAlternatives = 1;\n\n    recognition.onend = () => {\n      // console.log('onend');\n    };\n\n    recognition.onstart = () => {\n      // console.log('onstart');\n      setRecorder({ isRecording: true });\n    };\n\n    recognition.onresult = event => {\n        const last = event.results.length - 1;\n        const result = event.results[last][0];\n        // console.log([...transcripts], result);\n        setTranscripts([...transcripts, result.transcript]);\n    \n        console.log('Confidence: ' + result.confidence, result.transcript);\n      };\n    \n      recognition.onnomatch = event => {\n        // console.log(\"I didn't recognise that...\");\n      };\n    \n      recognition.onerror = event => {\n        // console.log('Error occurred in recognition: ' + event.error);\n      };\n\n      return recognition;\n  };\n\n  let recognition = newRecognition();\n\n  const startRecording = () => {\n    // console.log('start-clicked');\n    recognition.start();\n  };\n\n  const stopRecording = () => {\n    // console.log('stop-clicked');\n    recognition.stop();\n    recognition = newRecognition();\n    setRecorder({ isRecording: false });\n  };\n\n  return (\n    <div height=\"200px\">\n      <hr />\n      <textarea\n        className=\"text-area\"\n        rows=\"30\"\n        value={transcripts.join(`\n`)}\n        onChange={e =>\n          setTranscripts(\n            e.target.value.split(`\n`)\n          )\n        }\n      ></textarea>\n      <div className=\"App-intro\">\n        {recorder.isRecording && (\n          <div className=\"stop\" onClick={e => stopRecording()}>\n            STOP\n          </div>\n        )}\n        {!recorder.isRecording && (\n          <div onClick={e => startRecording()}>START</div>\n        )}\n        <br />\n        <br />\n      </div>\n      <hr />\n    </div>\n  );\n};\n","import React from 'react';\nimport Navbar from \"react-bootstrap/Navbar\";\nimport './App.css';\nimport Recorder from './components/Recorder';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Navbar bg=\"primary\" expand=\"lg\" variant=\"dark\">\n        <Navbar.Brand href=\"#home\">Transcription App</Navbar.Brand>\n      </Navbar>\n      <Recorder />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}