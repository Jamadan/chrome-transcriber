{"version":3,"sources":["../../src/components/Recorder.jsx"],"names":["React","useState","SpeechRecognition","webkitSpeechRecognition","isRecording","recorder","setRecorder","transcripts","setTranscripts","newRecognition","recognition","lang","continuous","interimResults","maxAlternatives","onend","onstart","onresult","event","last","results","length","result","transcript","console","log","confidence","onnomatch","onerror","startRecording","start","stopRecording","stop","join","e","target","value","split"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n// eslint-disable-next-line\nvar SpeechRecognition = SpeechRecognition || webkitSpeechRecognition;\n\nexport default () => {\n  const [recorder, setRecorder] = useState({ isRecording: false });\n  const [transcripts, setTranscripts] = useState([]);\n\n  const newRecognition = () => {\n    const recognition = new SpeechRecognition();\n\n    recognition.lang = 'en-GB';\n    recognition.continuous = true;\n    recognition.interimResults = true;\n    recognition.maxAlternatives = 1;\n\n    recognition.onend = () => {\n      // console.log('onend');\n    };\n\n    recognition.onstart = () => {\n      // console.log('onstart');\n      setRecorder({ isRecording: true });\n    };\n\n    recognition.onresult = event => {\n        const last = event.results.length - 1;\n        const result = event.results[last][0];\n        // console.log([...transcripts], result);\n        setTranscripts([...transcripts, result.transcript]);\n    \n        console.log('Confidence: ' + result.confidence, result.transcript);\n      };\n    \n      recognition.onnomatch = event => {\n        // console.log(\"I didn't recognise that...\");\n      };\n    \n      recognition.onerror = event => {\n        // console.log('Error occurred in recognition: ' + event.error);\n      };\n\n      return recognition;\n  };\n\n  let recognition = newRecognition();\n\n  const startRecording = () => {\n    // console.log('start-clicked');\n    recognition.start();\n  };\n\n  const stopRecording = () => {\n    // console.log('stop-clicked');\n    recognition.stop();\n    recognition = newRecognition();\n    setRecorder({ isRecording: false });\n  };\n\n  return (\n    <div height=\"200px\">\n      <hr />\n      <textarea\n        className=\"text-area\"\n        rows=\"30\"\n        value={transcripts.join(`\n`)}\n        onChange={e =>\n          setTranscripts(\n            e.target.value.split(`\n`)\n          )\n        }\n      ></textarea>\n      <div className=\"App-intro\">\n        {recorder.isRecording && (\n          <div className=\"stop\" onClick={e => stopRecording()}>\n            STOP\n          </div>\n        )}\n        {!recorder.isRecording && (\n          <div onClick={e => startRecording()}>START</div>\n        )}\n        <br />\n        <br />\n      </div>\n      <hr />\n    </div>\n  );\n};\n"],"file":"Recorder.js"}